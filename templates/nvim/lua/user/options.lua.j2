local create_autocmd = vim.api.nvim_create_autocmd

local options = {
  backup = false, -- creates a backup file
  clipboard = "unnamedplus", -- allows neovim to access the system clipboard
  completeopt = { "menuone", "noselect" }, -- mostly just for cmp
  conceallevel = 0, -- so that `` is visible in markdown files
  fileencoding = "utf-8", -- the encoding written to a file
  hlsearch = false, -- disable highlight all matches on previous search pattern
  incsearch = true, -- highlight all matches from regex
  ignorecase = true, -- ignore case in search patterns
  pumheight = 10, -- pop up menu height
  showmode = false, -- we don't need to see things like -- INSERT -- anymore
  showtabline = 2, -- always show tabs
  smartcase = true, -- smart case
  splitbelow = true, -- force all horizontal splits to go below current window
  splitright = true, -- force all vertical splits to go to the right of current window
  swapfile = false, -- creates a swapfile
  termguicolors = true, -- set term gui colors (most terminals support this)
  timeoutlen = 1000, -- time to wait for a mapped sequence to complete (in milliseconds)
  undofile = true, -- enable persistent undo
  updatetime = 300, -- faster completion (4000ms default)
  writebackup = false, -- if a file is being edited by another program (or was written to file while editing with another program), it is not allowed to be edited
  tabstop = 4, -- insert 4 spaces for a tab
  cursorline = true, -- highlight the current line
  number = true, -- set numbered lines
  relativenumber = true, -- set relative numbered lines
  signcolumn = "yes", -- always show the sign column, otherwise it would shift the text each time
  breakindent = true,
  breakindentopt = { "shift:2" },
  scrolloff = 8, -- is one of my fav
  sidescrolloff = 8,
  guifont = "{{ neovim_gui_font }}:h17", -- the font used in graphical neovim applications
}

vim.opt.shortmess:append("c") -- don't give ins-completion-menu messages

for k, v in pairs(options) do
  vim.opt[k] = v
end

vim.cmd("set whichwrap+=<,>,[,],h,l") -- allow "h" & "l" keys to move to previous/next line when on edges
vim.cmd([[set iskeyword+=-]]) -- treat dash symbol as single word union (useful when deleting a word for instance)
vim.cmd([[set formatoptions-=cro]]) -- TODO: this doesn't seem to work

-- Fix syntax highlighting for ninja template files
create_autocmd({ "BufNewFile", "BufRead" }, {
  pattern = { "*.*.j2" },
  command = [[ execute 'set filetype='..matchlist(expand('<afile>'), '.*\.\(.*\)\.j2$')[1] ]],
})
-- NOT WORKING (should replace above function)
-- vim.filetype.add({
--   pattern = {
--     ['.(a+).j2$'] = function(path, bufnr, ext)
--       return ext
--     end,
--   },
-- })

-- Automatically remove extra spaces
create_autocmd({ "BufWritePre" }, {
  pattern = { "*" },
  callback = function()
    -- Exclude markdown files
    if vim.bo.filetype ~= "markdown" then
      vim.cmd([[ %s/\s\+$//e ]])
    end
  end,
})
