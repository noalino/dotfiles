local opts = { noremap = true, silent = true }

-- Shorten function name
local keymap = vim.keymap.set

--Remap space as leader key
keymap("", "<Space>", "<Nop>", opts)
vim.g.mapleader = " "
vim.g.maplocalleader = " "

-- Modes
--   normal_mode = "n",
--   insert_mode = "i",
--   visual_mode = "v",
--   visual_block_mode = "x",
--   term_mode = "t",
--   command_mode = "c",

-- Normal --
-- Better window navigation
keymap("n", "<C-h>", "<C-w>h", opts)
keymap("n", "<C-j>", "<C-w>j", opts)
keymap("n", "<C-k>", "<C-w>k", opts)
keymap("n", "<C-l>", "<C-w>l", opts)

-- Resize with arrows
keymap("n", "<C-Up>", ":resize +2<CR>", opts)
keymap("n", "<C-Down>", ":resize -2<CR>", opts)
keymap("n", "<C-Left>", ":vertical resize -2<CR>", opts)
keymap("n", "<C-Right>", ":vertical resize +2<CR>", opts)

-- Navigate buffers
keymap("n", "<S-l>", ":bnext<CR>", opts)
keymap("n", "<S-h>", ":bprevious<CR>", opts)

-- Insert --
-- Press jk or JK fast to exit insert mode
keymap("i", "jk", "<ESC>", opts)
keymap("i", "JK", "<ESC>", opts)

-- Visual --
-- Stay in indent mode
keymap("v", "<", "<gv", opts)
keymap("v", ">", ">gv", opts)

-- Remap for dealing with word wrap
keymap("n", "k", "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
keymap("n", "j", "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- Move text up and down
keymap("v", "<A-j>", ":m .+1<CR>==", opts)
keymap("v", "<A-k>", ":m .-2<CR>==", opts)
-- Keep copied value when pasted in visual mode
keymap("v", "p", '"_dP', opts)

-- Visual Block --
-- Move text up and down
keymap("x", "J", ":move '>+1<CR>gv-gv", opts)
keymap("x", "K", ":move '<-2<CR>gv-gv", opts)
keymap("x", "<A-j>", ":move '>+1<CR>gv-gv", opts)
keymap("x", "<A-k>", ":move '<-2<CR>gv-gv", opts)

-- Telescope --
local tbuiltin = require('telescope.builtin')
keymap("n", "<leader>?", tbuiltin.oldfiles, { desc = "[?] Find recently opened files" })
keymap("n", "<leader><space>", tbuiltin.buffers, { desc = "[ ] Find existing buffers" })
keymap("n", "<leader>/", function()
  -- You can pass additional configuration to telescope to change theme, layout, etc.
  tbuiltin.current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
    winblend = 10,
    previewer = false,
  })
end, { desc = "[/] Fuzzily search in current buffer" })

keymap("n", "<leader>gf", tbuiltin.git_files, { desc = "Search [G]it [F]iles" })
keymap("n", "<leader>sf", tbuiltin.find_files, { desc = "[S]earch [F]iles" })
keymap("n", "<leader>sh", tbuiltin.help_tags, { desc = "[S]earch [H]elp" })
keymap("n", "<leader>sw", tbuiltin.grep_string, { desc = "[S]earch current [W]ord" })
keymap("n", "<leader>sg", tbuiltin.live_grep, { desc = "[S]earch by [G]rep" })
keymap("n", "<leader>sd", tbuiltin.diagnostics, { desc = "[S]earch [D]iagnostics" })
keymap("n", "<leader>sr", tbuiltin.resume, { desc = "[S]earch [R]esume" })

-- Diagnostic keymaps
local diagnostic = vim.diagnostic
keymap("n", "[d", diagnostic.goto_prev, { desc = "Go to previous diagnostic message" })
keymap("n", "]d", diagnostic.goto_next, { desc = "Go to next diagnostic message" })
keymap("n", "<leader>e", diagnostic.open_float, { desc = "Open floating diagnostic message" })
keymap("n", "<leader>q", diagnostic.setloclist, { desc = "Open diagnostics list" })
