# Enable color support
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

##########
# Custom #
##########

alias ..='cd ..'

######
# ls #
######

alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

########
# grep #
########

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

########
# Nvim #
########

snvim='sudoedit' # Edit files requiring sudo with nvim

#######
# Git #
#######
# See oh-my-zsh:
# - https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/git.zsh
# - https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh

# The git prompt's git commands are read-only and should not interfere with
# other processes. This environment variable is equivalent to running with `git
# --no-optional-locks`, but falls back gracefully for older versions of git.
# See git(1) for and git-status(1) for a description of that flag.
#
# We wrap in a local function instead of exporting the variable directly in
# order to avoid interfering with manually-run git commands by the user.
function __git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}

# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function git_current_branch() {
  local ref
  ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}

alias g='git'

alias ga='git add'
alias gaa='git add --all'
alias gap='git apply'

alias gb='git branch'

alias gcmsg='git commit --message'
alias gco='git checkout'
alias gcp='git cherry-pick'

alias gd='git diff'

alias gf='git fetch'

alias gl='git pull'

alias gp='git push'
alias gpsup='git push --set-upstream origin $(git_current_branch)'

alias grs='git restore'

alias gst='git status'

alias gsta='git stash push'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'

##################
# Docker-compose #
##################

# Support Compose v2 as docker CLI plugin
# (it checks if docker-compose is in PATH before setting 'dccmd')
(( ${+commands[docker-compose]} )) && dccmd='docker-compose' || dccmd='docker compose'

alias dco="$dccmd"
alias dcb="$dccmd build"
alias dce="$dccmd exec"
alias dcps="$dccmd ps"
alias dcrestart="$dccmd restart"
alias dcrm="$dccmd rm"
alias dcr="$dccmd run"
alias dcstop="$dccmd stop"
alias dcup="$dccmd up"
alias dcupb="$dccmd up --build"
alias dcupd="$dccmd up -d"
alias dcupdb="$dccmd up -d --build"
alias dcdn="$dccmd down"
alias dcl="$dccmd logs"
alias dclf="$dccmd logs -f"
alias dcpull="$dccmd pull"
alias dcstart="$dccmd start"
alias dck="$dccmd kill"

alias dcdev='$dccmd -f docker-compose.dev.yml'

unset dccmd
